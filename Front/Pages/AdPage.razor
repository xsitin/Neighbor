@page "/AdPage/{id}"
@using Board.Infrastructure
@using Common.Models
@using Board.Data
@using System.Security.Policy
@inject AdsRepository _repository
@inject AuthenticationStateProvider _provider
@if (Ad != null)
{
    <div class="container-fluid m-4">
        <div class="row">
            <div class="col-sm-10">
                <div class="row justify-content-center">
                    <div class="col-sm-8 align-self-center">
                        @if (Ad?.ImagesIds != null && Ad.ImagesIds.Length > 0)
                        {
                            <div class="d-flex justify-content-center">
                                <div id="carousel" class="carousel slide w-50" data-bs-ride="carousel">
                                    <div class="carousel-inner justify-content-center">
                                        <div class="carousel-item active justify-content-center">
                                            @{ var link = new Uri(new Uri(Constants.ApiPath), "img/get/" + Ad.ImagesIds[0]).ToString(); }
                                            <img class="d-block w-100" src="@link" alt="ad image">
                                        </div>
                                        @foreach (var id in Ad.ImagesIds.Skip(1))
                                        {
                                            <div class="carousel-item img-fluid justify-content-center">
                                                @{ link = new Uri(new Uri(Constants.ApiPath), "img/get/" + id).ToString(); }
                                                <img class="d-block w-100" src="@link" alt="ad image">
                                            </div>
                                        }
                                    </div>
                                    <button class="carousel-control-prev" type="button" data-bs-target="#carousel" data-bs-slide="prev">
                                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                        <span class="visually-hidden">Previous</span>
                                    </button>
                                    <button class="carousel-control-next" type="button" data-bs-target="#carousel" data-bs-slide="next">
                                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                        <span class="visually-hidden">Next</span>
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="row justify-content-around">
                        <div class="col-auto">
                            <h3 class="text-center">@Ad.Title </h3>
                        </div>
                        <div class="col-auto">
                            <h3 class="text-center">Категория: @Ad.Category</h3>
                        </div>
                    </div>
                </div>

                <div class="row justify-content-center">
                    <div class="col">
                        <h3 class="text-center">Цена: @Ad.Price</h3>
                    </div>
                </div>
                <div class="row justify-content-center">
                    <div class="col">
                        <p class="text-center">@Ad.Description</p>
                    </div>
                </div>
                <div class="row justify-content-center">
                    <div class="col-sm-5">
                        <h4 class="text-end">@Ad.OwnerName</h4>
                    </div>
                </div>
            </div>
            @if (_state.User.IsInRole("Administrator") || _state.User.Identity?.Name == Ad.OwnerName)
            {
                <div class="col-auto">
                    <AdRemove Id="@Ad.Id"></AdRemove>
                    <AdEditComponent Id="@Ad.Id"></AdEditComponent>

                </div>
            }
        </div>
    </div>
}

@code {

    [Parameter]
    public string Id { get; set; }

    private AuthenticationState _state;
    public Ad Ad { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Ad = await _repository.GetByIdAsync(Id);
        _state = await _provider.GetAuthenticationStateAsync();
    }

}
