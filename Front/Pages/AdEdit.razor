@page "/AdEdit/{id}"
@using Common.Models
@using Microsoft.AspNetCore.Authorization
@using Board.Infrastructure
@using Common.Enums
@using Board.Data
@attribute [Authorize]

<h3>Добавить обьявление</h3>
<div class="container-fluid">
    <EditForm Model="@Ad" OnValidSubmit="@SendRequestAsync">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        <div class="my-2">
            <label for="title">Название</label>
            <InputText id="title" @bind-Value="@Ad.Title" class="form-control"></InputText>
        </div>
        <div class="my-2">
            <label for="description">Цена</label>
            <InputTextArea id="description" @bind-Value="@Price" class="form-control" rows="3"></InputTextArea>
        </div>
        <div class="my-2">
            <label for="description">Описание</label>
            <InputTextArea id="description" @bind-Value="@Ad.Description" class="form-control" rows="3"></InputTextArea>
        </div>
        <div class="my-2">
            <InputSelect class="form-select" @bind-Value="@Ad.Category">
                @foreach (var category in Categories.Enumerated)
                {
                    <option value="@category">@category</option>
                }
            </InputSelect>
        </div>
        <div class="my-2">
            <label for="loadImages">Загрузить фото:</label>
            <InputFile multiple="true" class="form-control" accept="image/jpeg,image/png" id="loadImages" OnChange="ImagesChanged"></InputFile>
        </div>
        <p class="my-4">
            <button class="btn btn-primary" type="submit">Update</button>
        </p>
    </EditForm>
</div>

@inject AdsRepository _repository

@code {

    private string Price
    {
        get => Ad.Price.ToString();
        set
        {
            if (int.TryParse(value, out var buffer))
                Ad.Price = buffer;
        }
    }

    private Ad Ad { get; set; } = new();


    [Parameter]
    public string Id { get; set; }

    [Inject]
    NavigationManager Manager { get; set; }

    [Inject]
    AuthenticationStateProvider State { get; set; }

    [Inject]
    ILocalStorageService Storage { get; set; }

    public async Task SendRequestAsync()
    {
        var state = await (State as CustomAuthStateProvider).GetAuthenticationStateAsync();
        Ad.Category ??= Categories.Enumerated.First();
        Ad.OwnerName = state.User.Identity.Name;
        Ad.Id = Id;
        await _repository.Update(Ad, images);
        Manager.NavigateTo("/");
    }

    public IBrowserFile[] images { get; set; }
    private async Task ImagesChanged(InputFileChangeEventArgs eventArgs) => images = eventArgs.GetMultipleFiles().ToArray();

    protected override async Task OnInitializedAsync()
    {
        await _repository.GetByIdAsync(Id);
    }

}
